React Element
Todo elemento React é criado com a função createElement. 
O Babel é o responsável por transformar o elemento criado com JSX (quese parece com HTML) em funções de React.

// Código Usado 
function App(){
  return <div id ="container">Meu App</div>
}
// É transformado para o Babel em:
function App(){
  return React.createElement("div", {id: "container"}, "Meu App");
}

Consultar: Babel: https://babeljs.io/repl

function App(){
  return 
  <div id="app" class="text">Primeira linha
  	<ul>
    	<li>
    	</li>
  	</ul>
  </div>;
}

function App() {
  return;
  /*#__PURE__*/React.createElement("div", {
    id: "app",
    class: "text"
  }, "Primeira linha", /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null)));
}

// Composição

O principal motivo de criarmos componentes é para podermos compor a interface com diversos componentes que podem ser reutilizados.

const Button = () => {
  return <button>Comprar</button>;
};
const MainNav = () => {
  return (
    <nav>
      <a href="#">Link 1</a>
      <Button />
    </nav>
  );
};

Eventos

Podemos atribuir eventos diretamente aos elementos

const Produtos = () => {
  function handleClick(event){
    alert('Comprou: ' + event.target.innerText);
  }

  return (
    <div>
      <button onClick={handleClick}>Camisa</button>
      <button onClick={handleClick}>Bermuda</button>
    </div>
  );
};

Hooks

Utilizamos o React pelo facilidade de sincronização do estado. Antes dos Hooks, isso só era possível em componentes criados por meio de classes.

const Compras = () => {
  //useState é um Hook qyue define uma variável reativa
  const [count, setCount] = React.useState(0);

  return (
    <div>
      <button onClick={() => setCount(count +1)}> Comprar: {count}</button>
      <p>Total: {count}</p>
      <p>Preço: R$ {count * 250}</p>
    </div>
  );
};