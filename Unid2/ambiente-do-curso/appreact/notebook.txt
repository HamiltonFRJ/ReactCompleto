Hooks
Estado:
É uma representação da aplicação no momento exato.
Exemplo: Botão ativo, campo ativo.

const App = () => {
  const ativo = true;

  return(
    <button disabled={!ativo}>{ativo ? "Botão Ativo" : "Botão Inativo"}</button>
  )
}

NOTA

const App = () => {
  let ativo = true;

  function handleClick() {
    ativo = !ativo;
    console.log(ativo);
  }

  return (
    <button disabled={!ativo} onClick={handleClick}>
      {ativo ? 'Botão Ativo' : 'Botão Inativo'}
    </button>
  );
};

Mesmo com essa aplicação o botão näo fica inativo após o clique, por que a aplicação não renderiza novamente. Para isso que serve o Hooks.

Hooks
Os Hooks säo funçoes especiais do React que permitem controlarmos o estado e o ciclo de vida de componentes fucionais. Isso antes só era possível com classes.

React.useState

O useState é uma funçãzo que retorna uma Array com 2 valores. O primeiro valor guarda o dado do estado atual, pode ser qualquer tipo de dado como strings, arrays números, boolean, null, undefined e objetos. O segundo valor é uma função que pode ser utilizada para modificarmos o estado do primeiro valor.

Quando uma função de modificação do estado é ativada, todos os componentes que dependerem do estado, serão renderizados novamnete e os seus filhos também. É isso que garante a reatividade de componentes funcionais no React.

const App = () => {
  const [ativo, setAtivo] = React.useState(true);
  // É a mesma coisa que:
  // const ativoArray = React.useState(true);
  // const ativo = ativoArray[0];
  // const setAtivo = ativoArray[1];

  return (
    <button onClick={() => setAtivo(!ativo)}>
      {ativo ? 'Botão Ativo' : 'Botão Inativo'}
    </button>
  );
};

Múltiplos Estados

Não existem limites para o uso do useState, podemos definir diversos no mesmo componente.

const App = () => {
  const [contar, setContar] = React.useState(0);
  const [ativo, setAtivo] = React.useState(false);
  const [dados, setDados] = React.useState({nome: "", idade: ""});
}

return <div></div>

Caso vocÊ queira incrementar informação de um objeto, você pode fazer por meio de desestruturação

import React from 'react';

const App = () => {
  const [ativo, setAtivo] = React.useState(false);
  const [dados, setDados] = React.useState({nome: "Hamilton", idade: "21"});

  function handleClick(){
    setAtivo(!ativo);
    setDados({...dados, estado: "Casado"})
  }
  return (
    <div>
      <p>{dados.nome}</p>
      <p>{dados.idade}</p>
      <p>{dados.estado}</p>
      <button onClick={handleClick}>{ativo ? "Ativo" : "Inativo"}</button>
    </div>
  );
};

export default App;

Na hora de fazer a separação dos dados, sempre use os objetos com a forma de configuração conjunta.
Por exemplo, você nunca irá utilizar a identificação sem o nome, ou endereço, idade... Então, são dados que devem manter-se em um objeto apenas.

Props

Podemos passar o estado e a função de modificação como propriedades para outros elementos.
