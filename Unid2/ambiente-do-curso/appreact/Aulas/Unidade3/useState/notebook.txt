Hooks
Estado:
É uma representação da aplicação no momento exato.
Exemplo: Botão ativo, campo ativo.

const App = () => {
  const ativo = true;

  return(
    <button disabled={!ativo}>{ativo ? "Botão Ativo" : "Botão Inativo"}</button>
  )
}

NOTA

const App = () => {
  let ativo = true;

  function handleClick() {
    ativo = !ativo;
    console.log(ativo);
  }

  return (
    <button disabled={!ativo} onClick={handleClick}>
      {ativo ? 'Botão Ativo' : 'Botão Inativo'}
    </button>
  );
};

Mesmo com essa aplicação o botão näo fica inativo após o clique, por que a aplicação não renderiza novamente. Para isso que serve o Hooks.

Hooks
Os Hooks säo funçoes especiais do React que permitem controlarmos o estado e o ciclo de vida de componentes fucionais. Isso antes só era possível com classes.

React.useState

O useState é uma funçãzo que retorna uma Array com 2 valores. O primeiro valor guarda o dado do estado atual, pode ser qualquer tipo de dado como strings, arrays números, boolean, null, undefined e objetos. O segundo valor é uma função que pode ser utilizada para modificarmos o estado do primeiro valor.

Quando uma função de modificação do estado é ativada, todos os componentes que dependerem do estado, serão renderizados novamnete e os seus filhos também. É isso que garante a reatividade de componentes funcionais no React.

const App = () => {
  const [ativo, setAtivo] = React.useState(true);
  // É a mesma coisa que:
  // const ativoArray = React.useState(true);
  // const ativo = ativoArray[0];
  // const setAtivo = ativoArray[1];

  return (
    <button onClick={() => setAtivo(!ativo)}>
      {ativo ? 'Botão Ativo' : 'Botão Inativo'}
    </button>
  );
};

Múltiplos Estados

Não existem limites para o uso do useState, podemos definir diversos no mesmo componente.

const App = () => {
  const [contar, setContar] = React.useState(0);
  const [ativo, setAtivo] = React.useState(false);
  const [dados, setDados] = React.useState({nome: "", idade: ""});
}

return <div></div>

Caso vocÊ queira incrementar informação de um objeto, você pode fazer por meio de desestruturação

import React from 'react';

const App = () => {
  const [ativo, setAtivo] = React.useState(false);
  const [dados, setDados] = React.useState({nome: "Hamilton", idade: "21"});

  function handleClick(){
    setAtivo(!ativo);
    setDados({...dados, estado: "Casado"})
  }
  return (
    <div>
      <p>{dados.nome}</p>
      <p>{dados.idade}</p>
      <p>{dados.estado}</p>
      <button onClick={handleClick}>{ativo ? "Ativo" : "Inativo"}</button>
    </div>
  );
};

export default App;

Na hora de fazer a separação dos dados, sempre use os objetos com a forma de configuração conjunta.
Por exemplo, você nunca irá utilizar a identificação sem o nome, ou endereço, idade... Então, são dados que devem manter-se em um objeto apenas.

Props

Podemos passar o estado e a função de modificação como propriedades para outros elementos.

Reatividade
Não modifique o estado diretamente. Utilize sempre a função de atualização do estado, pois ela que garante a reatividade dos componentes.
const App = () => {
  const [itens, setItens] = React.useState(["Item 1", "Item 2"])
  function handleClick(){
    itens.push("Novo Item"); --> Errado. Modifique o estado apenas com a função de atualização a seguir
  }
  function handleClickReativo(){
    setItens([...itens, "Novo Item"]);
  }
  return (
    <>
  )
}

Callback 
Podemos passar uma função de callback para atualizar o estado. A função de callback recebe um parÂmetro que representa o valor anterior e ir modificar o estado para o valor que for retornado na função.

const App = () => {
  const [ativo, setAtivo] = React.useState(true);

  function handleClick() {
    // usando um callback
    setAtivo((anterior) => !anterior);
  }

  return (
    <button onClick={handleClick}>
      {ativo ? 'Está Ativo' : 'Está Inativo'}
    </button>
  );
};

Callback Valor Inicial 

const App = () => {
  // Callback no estado inicial, só será executado na criação do componente
  const [ativo, setAtivo] = React.useState(() => {
    const ativoLocal = window.localStorage.getItem('ativo');
    return ativoLocal;
  });

  function handleClick() {
    setAtivo((anterior) => !anterior);
  }

  return (
    <button onClick={handleClick}>
      {ativo ? 'Está Ativo' : 'Está Inativo'}
    </button>
  );
};

React.StrictMode
O modo estrito invoca duas vezes a renderizacao do componente, quando o estado  atualizado. Assim e possível identificarmos funcoes com efetiso colaterais (side effects) e eliminarmos as mesmas.

Funcoes com efetios colaterais sao aquelas que modificam estados que estao fora das mesmas. 

const Contador = () => {
  const [contar, setContar] = React.useState(1);
  const [items, setItems] = React.useState(['Item 1']);

  function handleClick() {
    setContar((contar) => {
      // setContar possui um efeito colateral.
      setItems((items) => [...items, 'Item ' + (contar + 1)]);
      return contar + 1;
    });
    // Tirar o efeito de dentro do setContar irá concertar o erro
    // setItems((items) => [...items, 'Item ' + (contar + 1)]);
  }

  return (
    <>
      {items.map((item) => (
        <li key={item}>{item}</li>
      ))}
      <button onClick={handleClick}>{contar}</button>
    </>
  );
};


